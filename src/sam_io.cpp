/**
 * Functions for reading SAM/BAM files.
 */

#include <iostream>
#include <algorithm>      /* set_intersection, sort, unique */
#include <future>         /* Multithreading */
#include <seqan/bam_io.h>
#include "sam_io.hpp"
#include "util.hpp"
#include "semaphore.hpp"
using namespace std;

typedef seqan::FormattedFileContext<seqan::BamFileIn, void>::Type TBamContext;

/**
 * @brief Get total number of reads in a SAM/BAM file.
 * @param filename  Name of query SAM/BAM file
 * @return          Number of lines in file
 */
int get_sam_line_count(string filename) {
    seqan::BamFileIn bam;
    if (!seqan::open(bam, filename.c_str())) {
        return -1;
    }
    seqan::BamHeader head;
    seqan::readHeader(head, bam);
    seqan::BamAlignmentRecord rec;
    int line_count = 0;
    while (!atEnd(bam)) {
        ++line_count;
        seqan::readRecord(rec, bam);
    }
    return line_count;
}

/**
 * @brief Gets "exons" of a read.
 *
 * Looks at CIGAR string to determine where a read was split up across different
 * exons, and returns a vector containing the exons of the read.
 *
 * @param r         Read to examine.
 * @return          Vector of exons
 */
vector<Exon> get_read_exon_positions(seqan::BamAlignmentRecord &r) {
    vector<Exon> exons;
    int start = r.beginPos, end = start;
    for (uint i = 0; i < seqan::length(r.cigar); ++i) {
        switch (r.cigar[i].operation) {
            case 'M':
            case 'D':
            case '=':
            case 'X': end += r.cigar[i].count;
                      break;
            case 'N': exons.push_back(Exon(start, end));
                      start = end + r.cigar[i].count;
                      end = start;
                      break;
            default: /* do nothing */ break;
        }
    }
    if (end == r.beginPos) {
        cerr << "  COMPLAINS LOUDLY" << endl;
    }
    exons.push_back(Exon(start, end));
    return exons;
}

/**
 * @brief Gets all possible transcripts associated with read exon vector (for
 * use with get_read_exon_positions function). That is, the function fills in
 * the "transcripts" member of the exon struct.
 *
 * @param chrom         Exons of the chromosome/scaffold the read aligns to.
 * @param read_exons    Vector of exons to fill with transcript information.
 * @postcondition       Transcripts member of exons in read_exons filled.
 */
void get_read_exon_transcripts(const vector<Exon> &chrom,
                               vector<Exon> &read_exons) {
   
    for (uint i = 0; i < chrom.size(); ++i) {
        for (uint j = 0; j < read_exons.size(); ++j) {
            if (read_exons[j].start >= chrom[i].start
                && read_exons[j].end <= chrom[i].end) {
                read_exons[j].transcripts->insert(
                    read_exons[j].transcripts->end(),
                    chrom[i].transcripts->begin(), chrom[i].transcripts->end());
            }
        }
    }
}

/**
 * @brief Gets string representation of the equivalence class of a read
 * based on the information contained in vector exons.
 *
 * @param exons     Vector containing information about annotated sequences
 * as generated by readGTFs method.
 *
 * @param read      Read struct containing information about read.
 *
 * @return          Vector containing the transcripts composing the equivalence
 * class.  Transcripts are described by an index which corresponds either to
 * where it showed up in the GFF(s), or to where it shows up in the FASTA
 * transcriptome file if that option was used. See readGFFs in gff_io.cpp for
 * more info.
 */
vector<int> get_eq(const vector<vector<Exon>*> &exons, TBamContext &cont,
        seqan::BamAlignmentRecord rec) {
    /* Find the vector describing the chromosome/scaffold this read aligned
     * to. If we can't find it, return immediately.*/
    vector<Exon> *chrom = NULL;
    for (uint i = 0; i < exons.size(); ++i) {
        if (exons[i]->size() != 0
            && lower(string(seqan::toCString(
                    seqan::contigNames(cont)[rec.rID]))).compare(
                    ((*exons[i])[0]).seqname) == 0) {
            chrom = exons[i];
            break;
        }
    }
    if (chrom == NULL) {
        return {};
    }

    /* Get "exons" of this read and fill in their associated transcript
     * vectors. */
    vector<Exon> read_exons = get_read_exon_positions(rec);
    get_read_exon_transcripts(*chrom, read_exons);
    
    /* Take the intersection of all the transcripts the read exons aligned
     * to, which gives the equivalence class of this read. */
    vector<int> inter(*read_exons[0].transcripts);
    sort(inter.begin(), inter.end()); 
    for (uint i = 1; i < read_exons.size(); ++i) {
        vector<int> temp;
        vector <int> *curr_transcripts = read_exons[i].transcripts;
        /* Sort transcripts in preparation for set_intersection. */
        sort(curr_transcripts->begin(), curr_transcripts->end());
        set_intersection(inter.begin(), inter.end(),
                         curr_transcripts->begin(), curr_transcripts->end(),
                         back_inserter(temp));
        inter = temp;
    }
    /* Remove duplicates. inter is already sorted! */
    inter.erase(unique(inter.begin(), inter.end()), inter.end());
    return inter;
}

/**
 * @brief Reads input SAM/BAM file and populates `matrix` with TCC counts.
 * Prints error message if file cannot be opened.
 *
 * @param file              Name of SAM/BAM file. 
 *
 * @param filenumber        "Number" of this SAM/BAM file corresponding to the
 * order in which query SAM/BAM files were entered into command line.
 *
 * @param start             The number of the read in this file to start at.
 *
 * @param end               The number of the read in this file to stop at. This
 * read (read # ${end}) will not be read.
 *
 * @param thread            Number describing which thread runs this function.
 * For debugging purposes.
 *
 * @param exons             Vector containing information from GFF. (See
 * readGFFs in gff_io.cpp for more info.
 *
 * @param matrix            The TCC matrix to populate with information about
 * TCC counts for this SAM/BAM file.
 *
 * @param unmatched_outfile The name of the file to which to write unmatched
 * reads.
 *
 * @param sem               Semaphore to control terminal output when multiple
 * threads are in use.
 *
 * @postcondition           `matrix` is populated with information about TCC
 * counts of reads in given SAM/BAM file.
 *
 * @return -1 if file fails to open, else 0
 */
int readSAMHelp(string file, int filenumber, int start, int end, int thread,
            vector<vector<Exon>*> &exons, TCC_Matrix &matrix,
            string unmatched_outfile, int verbose, Semaphore &sem) {

    if (end - start <= 1) {
        return -1;
    }
    uint64_t line_count = 0;
    seqan::BamFileIn bam;
    if (!seqan::open(bam, file.c_str())) {
        sem.dec();
        cerr << "  ERROR: failed to open " << file << endl;
        sem.inc();
        return -1;
    }

    /* Everything after this is a bit convoluted. Mostly because I can't find a
     * way to "unread" a line, as it were. */
    seqan::BamAlignmentRecord rec;
    seqan::BamAlignmentRecord rec2;
    seqan::BamHeader header;
    seqan::readHeader(header, bam);
    TBamContext cont = context(bam);
    /* Read in the first line. */
    if (start == 0) {
        ++line_count;
        seqan::readRecord(rec, bam);
    } else {
        while (line_count < start - 1) {
            ++line_count;
            seqan::readRecord(rec, bam);
        }
        string qName = seqan::toCString(rec.qName);
        ++line_count;
        seqan::readRecord(rec, bam);
        /* If `start` is in the middle of a multimapping (multientry) read,
         * keep going until it's done. */
        while (!atEnd(bam)
                && qName.compare(seqan::toCString(rec.qName)) == 0) {
            ++line_count;
            seqan::readRecord(rec, bam);
        }
    }
    string qName = seqan::toCString(rec.qName);
    vector<int> eq;
    if (!seqan::hasFlagUnmapped(rec)) {
        if (seqan::hasFlagMultiple(rec)) {
            ++line_count;
            seqan::readRecord(rec2, bam);
            if (!seqan::hasFlagUnmapped(rec2) && seqan::hasFlagAllProper(rec)
                    && ((seqan::hasFlagRC(rec) && !seqan::hasFlagRC(rec2))
                    || (!seqan::hasFlagRC(rec) && seqan::hasFlagRC(rec2)))
                    && seqan::hasFlagFirst(rec) && seqan::hasFlagLast(rec2))
            {
                /* eq = intersect(get_eq(rec), get_eq(rec2)) */
                /* get_eq returns a sorted vector, so no need to sort here. */
                vector<int> temp1 = get_eq(exons, cont, rec);
                vector<int> temp2 = get_eq(exons, cont, rec2);
                set_intersection(temp1.begin(), temp1.end(),
                        temp2.begin(), temp2.end(), back_inserter(eq));
                /* Remove duplicates. eq is already sorted. */
                eq.erase(unique(eq.begin(), eq.end()), eq.end());
            }
        }
        else {
            eq = get_eq(exons, cont, rec);
        }
    }
    int unmatched = 0;
    while (!atEnd(bam)) {
        ++line_count;
        seqan::readRecord(rec, bam);

        /* If this is a new read (i.e. new qName), enter the TCC of the previous
         * one into the matrix. */
        if (qName.compare(seqan::toCString(rec.qName)) != 0) {
            if (!atEnd(bam) && line_count >= end) {
                break;
            }
            if (eq.size() == 0) {
                ++unmatched;
            } else {
                string string_eq = to_string(eq[0]);
                for (int i = 1; i < eq.size(); ++i) {
                    string_eq += ',' + to_string(eq[i]);
                }
                matrix.inc_TCC(string_eq, filenumber);
                eq.clear();
            }
            qName = seqan::toCString(rec.qName);
        }

        if (seqan::hasFlagUnmapped(rec)) {
            continue;
        }
        vector<int> temp_eq = get_eq(exons, cont, rec);
        if (seqan::hasFlagMultiple(rec)) {   
            ++line_count;
            seqan::readRecord(rec2, bam);
            if (!seqan::hasFlagUnmapped(rec2) && seqan::hasFlagAllProper(rec)
                    && ((seqan::hasFlagRC(rec) && !seqan::hasFlagRC(rec2))
                    || (!seqan::hasFlagRC(rec) && seqan::hasFlagRC(rec2)))
                    && seqan::hasFlagFirst(rec) && seqan::hasFlagLast(rec2))
            {
                /* temp_eq = intersect(temp_eq, get_eq(rec2)) */
                vector<int> temp1 = get_eq(exons, cont, rec2);
                vector<int> temp2;
                set_intersection(temp_eq.begin(), temp_eq.end(),
                temp1.begin(), temp1.end(), back_inserter(temp2));
                temp_eq = temp2;
                /* Remove duplicates. temp_eq is already sorted. */
                temp_eq.erase(unique(temp_eq.begin(), temp_eq.end()),
                    temp_eq.end());
            } else {
                continue;
            }
        }
        /* eq = union(eq, temp_eq) */
        eq.insert(eq.end(), temp_eq.begin(), temp_eq.end());
        sort(eq.begin(), eq.end());
        /* Remove duplicates. */
        eq.erase(unique(eq.begin(), eq.end()), eq.end());
    }

    /* The last read was never added to the matrix. Do so now. */
    if (eq.size() == 0) {
        ++unmatched;
    } else {
        string string_eq = to_string(eq[0]);
        for (int i = 1; i < eq.size(); ++i) {
            string_eq += ',' + to_string(eq[i]);
        }
        matrix.inc_TCC(string_eq, filenumber);
    }

    /* TODO: output unmatched reads. */

    return unmatched;
}

int readSAM(string file, int filenumber,
             vector<vector<Exon>*> &exons, TCC_Matrix &matrix,
             string unmatched_outfile, int verbose, int nthreads) {

    cout << "Reading " << file << "..." << endl;

    vector<future<int>> unmatched;
    Semaphore sem;
    int lines = get_sam_line_count(file);
    if (lines == -1) {
        cerr << "  ERROR: failed to open " << file << endl;
    }
    for (int j = 0; j < nthreads - 1; ++j) {
        unmatched.push_back(async(launch::async, &readSAMHelp,
                file, filenumber,
                lines / nthreads * j, lines / nthreads * (j + 1), j,
                ref(exons), ref(matrix), unmatched_outfile, verbose,
                ref(sem)));
    }
    unmatched.push_back(async(launch::async, &readSAMHelp,
            file, filenumber,
            lines / nthreads * (nthreads - 1), lines, nthreads - 1,
            ref(exons), ref(matrix), unmatched_outfile, verbose,
            ref(sem)));

    int total_unmatched = 0;
    for (int i = 0; i < unmatched.size(); ++i) {
        if (unmatched[i].valid()) {
            unmatched[i].wait();
        }
        else {
            cout << "invalid state?" << endl;
        }
        int temp = unmatched[i].get();
        if (temp == -1) {
            cerr << "  WARNING: thread " << i << " failed" << endl;
        }
        else {
            total_unmatched += temp;
        }
    }

    return total_unmatched;
}

